runApp()
list( list(1,2), list(3,4) )
lapply( list( list(1,2), list(3,4) ), "["(1) )
lapply( list( list(1,2), list(3,4) ), ".["(1) )
lapply( list( list(1,2), list(3,4) ),  function(x){x[1]} )
unlist( lapply( list( list(1,2), list(3,4) ),  function(x){x[1]} ) )
unlist( lapply( list( list(1,2), list(3,4) ),  `[[`, 1 ) )
runApp()
runApp()
runApp()
runApp()
runApp()
?selectInput
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
function(t,x) { 
s <- 0
for( i in 1:t ) { s <- s + 2^i * (1-i*x) }
s
}
N <- function(t,x) { 
s <- 0
for( i in 1:t ) { s <- s + 2^i * (1-i*x) }
s
}
N
N(1)
N(1,.2)
N(1,.1)
N(0,.1)
N
?Vectorize
sat( 1:10, .1 )
sat( 0:10, .1 )
sat( 10, .1 )
sat( 10, .1 )
sat( 10, .1 )
sat( 10, .1 )
sat( 10, .1 )
sat( 10, .1 )
sat( 10, .1 )
sat( 10, .1 )
sat( 10, .1 )
plot( sat( 10, .1 ) )
plot( sat( 20, .05 ), log="y" )
plot( sat( 20, .1 ), log="y" )
plot( sat( 100, .01 ), log="y" )
plot( sat( 20, .1 ), log="y" )
lines( 2^(1:10))
sat( 1:10, 0 )
sat( 0:10, 0 )
sat( 0:10, 0.1 )
sat( 1:10, 0.1 )
sat( 1:10, 0.1 )
sat( 1:10, 0.1 )
sat( 1:10, 0.1 )
sat( 1:10, 0.1 )
sat( 1:10, 0.05 )
plot( sat( 1:10, 0.05 ), log="y" )
lines( sat( 1:10, 0 ) )
plot( sat( 1:50, 0.05 ), log="y" )
plot( sat( 1:19, 0.05 ), log="y" )
lines( sat( 1:19, 0 ) )
sat( 1:10, 0.1 )
sat( 1:20, 0.1 )
sat( 1:20, 0.1 )
sat( 1:20, 0.1 )
sat( 1:20, 0.1 )
22.81/24.86
sat(1:20,.1)
sat(1:20,.15)
sat(1:10,.1)
dev.off()
sat(1:20,0)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
o
runApp()
runApp()
help(hoverOpts)
runApp()
lm( y~x, data.frame( x=0:3, y=c(0,2,3,5) )
)
lm( y~x, data.frame( x=0:3, y=c(0,2,3,5) ))
Anova(lm( y~x, data.frame( x=0:3, y=c(0,2,3,5) )))
library(car)
Anova(lm( y~x, data.frame( x=0:3, y=c(0,2,3,5) )))
predict(lm( y~x, data.frame( x=0:3, y=c(0,2,3,5) )))
p <- predict(lm( y~x, data.frame( x=0:3, y=c(0,2,3,5) )))
cor( as.numeric(names(p), p )
)
cor( as.numeric(names(p)), p )
cor( c(0,2,3,5), p )
cor( c(0,2,3,5), p )^2
format( cor( c(0,2,3,5), p )^2, digits = 2 )
fread( "https://github.com/pcm-dpc/COVID-19/blob/master/dati-andamento-nazionale/dpc-covid19-ita-andamento-nazionale.csv" )
fread("https://raw.githubusercontent.com/pcm-dpc/COVID-19/master/dati-andamento-nazionale/dpc-covid19-ita-andamento-nazionale.csv")
names(italy)
warnings()
ls
italy.confirmed
italy$totale_attualmente_positivi
cumsum(italy$totale_attualmente_positivi)
italy
names(italy)
italy$totale_casi
italy.confirmed
as.Date( italy$data, format="Y5-%m-%d" )
as.Date( italy$data, format="%Y-%m-%d" )
names(confirmed)
confirmed[ Region=="Italy", .(Lat[1]) ]
confirmed[ Region=="Italy", .(Long[1]) ]
italy.confirmed
runApp()
runApp()
confirmed[order(-max(Count))]
confirmed[order(max(Count))]
confirmed
c<-load.jhu.csse.data("Confirmed")
c
c[,max(Count),by=Region]
c[,max(Count),by=Region][order(-V1),Region]
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
names(italy)
confirmed[Region=="Italy"]
runApp()
runApp()
italy.deaths
confirmed[ Region=="Italy" ]
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
rm( list=ls() )
runApp()
confirmed
sorted.regions
runApp()
sorted.subregions
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?print.Date
?format.Date
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
names(fr)
fr[ grep("REG-",maille_nom)]
fr[ grep("REG",maille_nom)]
fr[ grep("REG",maille_nom),]
fr$maille_nom
fr[ grep("REG",maille_num),]
fr[ grep("REG",maille_code),]
names(fr)
unique(fr$granularite)
fr[ maille_code=="FRA", deces ]
fr[ maille_code=="FRA", .(date,deces) ]
covid[ Region=="France" & What=="Fatalities", Count ]
covid[ Region=="France" & What=="Fatalities", .(Day,Count) ]
fr[ maille_code=="FRA", .(date,deces) ]
covid[ Region=="France" & What=="Fatalities", .(Day,Count) ]
fr[ maille_code=="FRA", .(date,deces) ]
covid[ What=="Fatalities" & Day=="2020-03-17" ]
covid[ What=="Fatalities" & Day=="2020-03-17" & Subregion=="All" ]
covid[ What=="Fatalities" & Day=="2020-03-17" & Subregion=="All", sum(Count) ]
names(fr)
unique(fr$Subregion)
names(fr)
names(covid)
fr.c
covid[ Region=="France", min(Day) ]
fr[ , min(Day) ]
library(shiny)
runApp()
covid
covid[ Region=="France" ]
runApp()
runApp()
runApp()
fr
runApp()
source("covid.R")
covid.sorted.subregions( covid, "France" )
covid.sorted.subregions(covid,"France")
runApp()
fr
fr[ is.na(Day) ]
fr[ is.na(Count) ]
fr[ is.na(Count) ]
fr[ is.na(cas_confirmes) ]
fr[ is.na(deces) ]
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
