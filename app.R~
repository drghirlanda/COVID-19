library(shiny)
library(data.table)
library(zoo)

source("covid.R")

deaths <- load.covid( "Deaths" )
confirmed <- load.covid( "Confirmed" )

data.sets <- list()

ui <- fluidPage(
    titlePanel( "COVID-19: Data and Models" ),
    sidebarLayout(
        sidebarPanel(
            selectInput(
                inputId="selectRegion",
                label="Region/Country",
                choices=unique( confirmed[order(-RegionTotal),Region] )
            ),
            selectInput(
                inputId="selectSubregion",
                label="Province/State",
                choices=unique(
                    confirmed[order(-SubregionTotal),Subregion]
                )
            ),
            actionButton(
                inputId="buttonAdd",
                label="Add to Graph"
            ),
            hr(),
            p( HTML("<b>Plot Options</b>") ),
            selectInput(
                inputId="selectFirstDay",
                label="First Day",
                choices=unique( confirmed$Day )
            ),
            radioButtons(
                inputId="radioScale",
                label="Vertical Scale",
                choices=c("Linear","Logarithmic"),
                selected="Logarithmic"
            ),
            checkboxInput(
                inputId="includeModel",
                label="Include Exponential Model",
                value=TRUE
            )
        ),
        mainPanel(
            plotOutput( outputId="plot" )
        )
    )
)

server <- function( input, output, session ) {

    ## names of data sets to plot, and fitted models
    dataSets <- reactiveValues()
    dataFits <- reactiveValues()
    
    ## adjust subregion selectInput to selected region
    observe({
        subregions <- unique(
            confirmed[
                Region == input$selectRegion ][
                order(-Subregion),
                Subregion
            ]
        )
        updateSelectInput(
            session,
            inputId="selectSubregion",
            choices=subregions
        )
    })
    
    ## add data set to dataSets 
    observeEvent( input$buttonAdd, {
        region <- input$selectRegion
        subregion <- input$selectSubregion
        region.subregion <- paste( region, subregion, sep="+" )
        if( ! region.subregion %in% dataSets ) {
            dataSets[[region.subregion]] <- TRUE
        }
    })

    output$plot <- renderPlot({
        message( names(dataSets) )
        if( ! length( names(dataSets) ) ) {
            return()
        }

        ## first and last day in graph
        firstDay <- input$selectFirstDay
        lastDay <- max( confirmed$Day )

        ## find ymax
        yMax <- 0
        region.subregion <- strsplit( names(dataSets), "+", fixed=TRUE )
        for( rs in region.subregion ) {
            y <- confirmed[
                Region    == rs[1] &
                Subregion == rs[2] &
                Day       >= firstDay,
                max(Count)
            ]
            if( y>yMax ) {
                yMax <- y
            }
        }
        
        ## set logscale
        if( input$radioScale=="Linear" ) {
            logScale <- ""
        } else {
            logScale <- "y"
        }
        
        yMax <- 2 * yMax

        ## set the stage
        par( las=1 )
        plot(
            as.Date( NA ),
            NA,
            xlab = "Day",
            ylab = "Count",
            xlim = c( as.Date(firstDay), lastDay ),
            ylim = c( 1, yMax ),
            log  = logScale
        )

        ## set up legend data structures
        lg.text <- c()
        lg.col  <- c()
        ## add points
        i <- 1
        for( rs in region.subregion ) {
            dt <- confirmed[
                Region    == rs[1] &
                Subregion == rs[2] &
                Day       >= firstDay
            ]
            dt.fit <- exp.fit( dt )
            exp.plot(
                dt.fit,
                add=TRUE,
                npred=1,
                col=i,
                model=input$includeModel
            )
            if( rs[2]=="All" ) {
                lg.this <- rs[1]
            } else {
                lg.this <- paste(rs[1],rs[2],sep="/")
            }
            if( input$includeModel & !is.null(dt.fit$fit) ) {
                td <- format( 1 / coef(dt.fit$fit)[2], digits=3 )
                lg.this <- paste0( lg.this, " Td=", td )
            }
            lg.text <- c( lg.text, lg.this )
            lg.col <- c( lg.col, i )
            i <- i + 1
        }
        if( logScale=="" ) {
            lg.pos <- "topleft"
        } else {
            lg.pos <- "bottomright"
        }
        legend(
            lg.pos,
            legend=lg.text,
            col=lg.col,
            bty="n",
            lty=1,
            pch=16
        )
    })
    
}

shinyApp( ui=ui, server=server )

